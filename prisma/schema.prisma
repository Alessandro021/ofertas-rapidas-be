// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// https://www.prisma.io/docs/getting-started/quickstart

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ruleUser {
  comum
  admin
}

model Users {
  userId String @id @default(uuid())
  email String @unique
  password String
  profile Profile?
  rule ruleUser @default(comum)
  promotion Promotions[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user")
}

model Profile {
  profileId String @id @default(cuid())
  userName String
  userSurname String
  photo String?
  user Users @relation(fields: [userId], references: [userId])
  userId String @unique

   @@map("profile")
}

model Categories {
  categoryId Int @id @default(autoincrement())
  name String @unique
  promotions Promotions[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
  @@map("categories")
}


model Promotions {
  promotionId String @id @default(cuid())
  title String
  company String
  description String
  url String
  photo String?
  expirationDate DateTime?
  comments Comments[]
  category Categories @relation(fields: [categoryId], references: [categoryId])
  categoryId Int
  user Users @relation(fields: [userId], references: [userId])
  userId String
  rating Ratings[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("promotion")
  @@index([title])
}

model Comments {
  commentId String @id @default(cuid())
  comment String
  userId String
  userPhoto String?
  userName String
  userSurname String
  promotion Promotions @relation(fields: [promotionId], references: [promotionId])
  promotionId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comment")
}

model Ratings {
  ratingId String @id @default(cuid())
  rating Int
  comment String?
  userId String
  userPhoto String?
  userName String
  userSurname String
  promotion Promotions @relation(fields: [promotionId], references: [promotionId])
  promotionId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("rating")
}


// Users: Este modelo representa os usuários da aplicação. Ele tem um relacionamento com o modelo Profile, 
// que é opcional (Profile?). Isso significa que um usuário pode ou não ter um perfil associado. Além disso, 
// um usuário pode ter várias promoções (Promotions[]), o que indica que um usuário pode criar várias promoções.

// Profile: Este modelo representa o perfil de um usuário. Ele tem um relacionamento com o modelo Users, que é 
// obrigatório (Users @relation(fields: [userId], references: [userId])). Isso significa que um perfil sempre 
// está associado a um usuário.

// Categories: Este modelo representa as categorias de promoções. Ele tem um relacionamento com o modelo Promotions, 
// que é um array (Promotions[]). Isso indica que uma categoria pode ter várias promoções.

// Promotions: Este modelo representa as promoções. Ele tem três relacionamentos: com o modelo Users (um usuário pode 
// criar várias promoções), com o modelo Categories (uma promoção pertence a uma categoria) e com o modelo Ratings 
// (uma promoção pode receber várias classificações).

// Comments: Este modelo representa os comentários feitos pelos usuários nas promoções. Ele tem um relacionamento com 
// o modelo Promotions, que é obrigatório (Promotions @relation(fields: [promotionId], references: [promotionId])). 
// Isso significa que um comentário sempre está associado a uma promoção.

// Ratings: Este modelo representa as classificações feitas pelos usuários nas promoções. Ele também tem um relacionamento 
// com o modelo Promotions, que é obrigatório (Promotions @relation(fields: [promotionId], references: [promotionId])). 
// Isso significa que uma classificação sempre está associada a uma promoção.